
Notes on Computer Project #9
----------------------------

Comments about the assignment and responses to frequently asked questions will
be added to this file as necessary.

***** comments added on 03/21/16 *****

1) Please note the following statement from the assignment handout:

  The deliverables for this assignment are:

    proj09.makefile  -- the makefile which produces "proj09"
    proj09.support.s -- the source code for your support module
    proj09.driver.c  -- the source code for your driver module

  Be sure to submit your files for grading via the "handin" program.

It is possible to submit your solution files multiple times:  the last files
that you submit will be graded.

2) Please note that you are required to create a makefile which controls the
translation of your program, and that the name of your executable file must be
"proj09".

3) For your convenience, I have supplied the following file:

  ~cse320/Projects/project09.support.h

That file contains declarations of the seven functions that are required in
your support module, as well as the declaration of "union dp_item".

Since that file may not be modified, there is no reason to copy it into your
account.  Instead, use its absolute pathname in the appropriate preprocessor
directive.  For example:

  #include "/user/cse320/Projects/project09.support.h"

Any C source code which invokes those functions should contain the appropriate
preprocessor directive.

4) Be sure to think carefully about the special cases that can arise, such as
the special exponent which represents Infinity (and NaN) and the exponent
which represents Zero (and denormal values).

5) Please note the following statement from the assignment handout:

  The functions in the support module will not use any floating point
  operations, and they will not call any C library functions.

You may wish to use "printf" or the "reglib" functions to display intermediate
results as you develop your support module, but be sure to remove those calls
(or turn them into comments) before submitting your work.

6) To negate a value means to change its sign.  That's the same as unary
negation in C/C++ (for example, "-A" when "A" has been declared to be type
"double").

7) You might wish to use an object of type "union dp_item" in your driver
module to test a specific bit pattern.  Here's a brief example with some
notation that might be helpful:

  #include <stdio.h>

  #include "/user/cse320/Projects/project09.support.h"

  int main()
  {
    union dp_item A, B;

    A.drep = -14.375;

    printf( "A: %16llx (%lf)\n\n", A.irep, A.drep );

    B.irep = 0x7ff0000000000000ULL;

    printf( "B: %16llx (%lf)\n\n", B.irep, B.drep );

    return 0;
  }

When compiled and executed, that program produces the following:

  A: c02cc00000000000 (-14.375000)

  B: 7ff0000000000000 (Inf)

Please note the use of "ULL" to indicate that an integer constant is of type
"unsigned long long", as well as the formatting specification "%llx".

8) Make sure that all of the functions are declared properly in your driver
module.  That is, your driver module should have the statement:

  #include "/user/cse320/Projects/project09.support.h"

The C language allows you to call a function without declaring it.  However,
it assumes that all arguments and the return value are values of type "int".
Obviously, that's not desirable in many situations.

9) If you use an object of type "union dp_item" in your driver module, be sure
to use the ".drep" notation when passing that object as a parameter.

For example:

    union dp_item A, B;

    A.drep = -14.375;

    negate( A.drep, &B.drep );

Also, please note that the second argument to "negate" (and "absolute") is a
pointer, so you must send the address of a variable of type "double".

10) You can use the "reglib" functions to help you identify run-time errors in
your functions.

For example, if you're not sure that a function is receiving valid arguments,
use "iu_window" immediately after the "save" instruction and examine the
contents of the "in" registers.  If the first argument is a value of type
"double", it will be in %i0 and %i1.

Similarly, you can call "iu_window" at other places in your code so that you
can examine the contents of the registers and verify that you're computing the
various values correctly.

If you call "iu_window" or any of the other "reglib" functions, you'll need to
link "/user/cse320/lib/reglib.o" to your other object code files when you make
your executable file.

11) Think carefully about how to copy a character string from one area of
memory to another in function "classify".  There are a number of ways that
task can be done, but one straight-forward approach is to use a loop with LDUB
and STB.  Each pass through the loop, increment both the source address and
the destination address by 1.

Here's a quick example in C which uses that approach:

  #include <stdio.h>

  int main()
  {
    char orig[] = "Hello, World!";
    char dest[80];

    char *s1 = &orig[0];
    char *s2 = &dest[0];

    while ( 1 )
    {
      *s2 = *s1;
      if (*s2 == '\0') break;
      s1++;
      s2++;
    }

    printf( "orig: %s\n", orig );
    printf( "dest: %s\n", dest );

    return 0;
  }

For any of you that have ever doubted the expressive power of C/C++, here's a
more compact version of that same example:

  #include <stdio.h>

  int main()
  {
    char orig[] = "Hello, World!";
    char dest[80];

    char *s1 = &orig[0];
    char *s2 = &dest[0];

    while ((*s2++ = *s1++) != '\0') {}

    printf( "orig: %s\n", orig );
    printf( "dest: %s\n", dest );

    return 0;
  }

Yes, the body of the loop is empty.

--M. McCullen

